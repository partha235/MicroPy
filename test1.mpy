from machine import Pin, I2C
import time

# Define SSD1306 constants
SSD1306_ADDR = 0x3C
SSD1306_WIDTH = 128
SSD1306_HEIGHT = 64

# I2C pins (adjust according to your wiring)
I2C_SCL_PIN = 22  # Example GPIO pin for SCL
I2C_SDA_PIN = 21  # Example GPIO pin for SDA

# Initialize I2C
i2c = I2C(0, scl=Pin(I2C_SCL_PIN), sda=Pin(I2C_SDA_PIN), freq=400000)

# Initialize SSD1306
def init_display():
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xAE]))  # Display Off
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xD5, 0x80]))  # Set Display Clock Divide Ratio/Oscillator Frequency
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xA8, 0x3F]))  # Set Multiplex Ratio
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xD3, 0x00]))  # Set Display Offset
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x40]))  # Set Display Start Line
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x8D, 0x14]))  # Charge Pump
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x20, 0x00]))  # Set Memory Addressing Mode
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xA1]))  # Set Segment Re-map
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xC8]))  # Set COM Output Scan Direction
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xDA, 0x12]))  # Set COM Pins Hardware Configuration
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x81, 0xCF]))  # Set Contrast Control
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xD9, 0xF1]))  # Set Pre-charge Period
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xDB, 0x40]))  # Set VCOMH Deselect Level
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xA4]))  # Set Entire Display On/Off
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xA6]))  # Set Normal/Inverse Display
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0xAF]))  # Display On

# Clear the display
def clear_display():
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x21, 0x00, SSD1306_WIDTH - 1]))  # Set Column Address
    i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x22, 0x00, SSD1306_HEIGHT - 1]))  # Set Page Address
    i2c.writeto(SSD1306_ADDR, bytes([0x40]))  # Data Mode
    i2c.writeto(SSD1306_ADDR, bytes([0x00] * (SSD1306_WIDTH * SSD1306_HEIGHT // 8)))  # Clear Data

# Draw a pixel on the display
def draw_pixel(x, y, color):
    if 0 <= x < SSD1306_WIDTH and 0 <= y < SSD1306_HEIGHT:
        i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x21, x, x]))  # Set Column Address
        i2c.writeto(SSD1306_ADDR, bytes([0x00, 0x22, y, y]))  # Set Page Address
        i2c.writeto(SSD1306_ADDR, bytes([0x40]))  # Data Mode
        i2c.writeto(SSD1306_ADDR, bytes([color << (y % 8)]))  # Set Pixel
try:
    # Main program
    print("trying main program")
    init_display()
    clear_display()

    # Draw a simple pattern
    for i in range(SSD1306_WIDTH):
        draw_pixel(i, i, 1)

    # Wait for a few seconds
    time.sleep(5)
    clear_display()
    print("cleared")

except Exception as e:
    print(e)
