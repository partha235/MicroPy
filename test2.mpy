import sys
from machine import Pin
from machine import Timer
from time import sleep_ms
import ubluetooth
import struct

# Initialize the BLE module
bl = ubluetooth.BLE()
print(dir(bl))

# Activate Bluetooth
bl.active(True)

# Define the UUIDs for the Nordic UART Service (NUS)
NUS_UUID = ubluetooth.UUID('6E400001-B5A3-F393-E0A9-E50E24DCCA9E')
RX_UUID = ubluetooth.UUID('6E400002-B5A3-F393-E0A9-E50E24DCCA9E')
TX_UUID = ubluetooth.UUID('6E400003-B5A3-F393-E0A9-E50E24DCCA9E')

# Create the characteristics with their properties
RX_CHAR = (RX_UUID, ubluetooth.FLAG_WRITE)
TX_CHAR = (TX_UUID, ubluetooth.FLAG_NOTIFY)

# Create the service with the characteristics
NUS_SERVICE = (NUS_UUID, (RX_CHAR, TX_CHAR))

# Register the service
bl.gatts_register_services([NUS_SERVICE])

# Callback function for Bluetooth events
def ble_irq(event, data):
    if event == 1:  # Central connected
        conn_handle, addr_type, addr = data
        print('Device connected')
    elif event == 2:  # Central disconnected
        conn_handle, addr_type, addr = data
        print('Device disconnected')
    elif event == 3:  # New message received
        conn_handle, value_handle = data
        value = bl.gatts_read(value_handle)
        print('Received message:', value)

# Set the IRQ handler for Bluetooth
bl.irq(ble_irq)

# Function to create advertising payload
def advertising_payload(name=None, services=None):
    payload = bytearray()

    def _append(adv_type, value):
        nonlocal payload
        payload += struct.pack('BB', len(value) + 1, adv_type) + value

    _append(0x01, struct.pack('B', 0x06))

    if name:
        _append(0x09, name.encode())

    if services:
        for uuid in services:
            b = bytes(uuid)
            _append(0x06 if len(b) == 2 else 0x07, b)

    return payload

# Start advertising
adv_data = advertising_payload(name='MyESP32', services=[NUS_UUID])
bl.gap_advertise(100, adv_data)

print('Bluetooth setup complete')

# Main loop
try:
    while True:
        sleep_ms(1000)
except KeyboardInterrupt:
    print("Program interrupted")
    sys.exit()
